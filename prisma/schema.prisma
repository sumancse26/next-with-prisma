// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
    id BigInt @id @default(autoincrement())
    firstName String @db.VarChar(100)
    lastName String @db.VarChar(100)
    email String @db.VarChar(50)
    mobile String @db.VarChar(15)
    password String @db.VarChar(30)
    otp String @db.VarChar(10)
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    categories Categories[]
    products Products[]
    Invoice_products Invoice_products[]
    Invoice Invoices[]
    Customers Customers[]
}

model Categories{
    id BigInt @id @default(autoincrement())
    name String @db.VarChar(100)
    userId BigInt
    user Users @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    product Products[]
}

model Products {
    id BigInt @id @default(autoincrement())
    userId BigInt
    user Users @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)

    categoryId BigInt
    category Categories @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    
    name String
    price String
    unit String
    img_url String
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    Invoice_products Invoice_products?
}

model Invoice_products {
    id BigInt @id @default(autoincrement())
    invoice_id BigInt
    Invoice Invoices @relation(fields: [invoice_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
    product_id BigInt @unique
    product Products @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
    user_id BigInt
    user Users @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

    qty String
    sale_price String
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model Invoices {
    id BigInt @id @default(autoincrement())
    total String
    discount String
    vat String
    payable String
    user_id BigInt
    user Users @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

    customer_id BigInt
    Customers Customers @relation(fields: [customer_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    Invoice_products Invoice_products[]
}

model Customers {
    id BigInt @id @default(autoincrement())
    name String
    email String
    mobile String
    user_id BigInt
    Users Users @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
    
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    Invoices Invoices[]
    
}
